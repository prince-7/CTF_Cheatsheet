
from Crypto.Util.number import inverse, long_to_bytes
import sys


binn = [42, 73, 99, 101, 32, 67, 114, 101, 97, 109, 32, 66, 121, 116, 101, 115, 32, 85, 115, 101, 114, 32, 77, 97, 110, 117, 97, 108, 42, 10, 84, 104, 101, 32, 73, 99, 101, 32, 67, 114, 101, 97, 109, 32, 66, 121, 116, 101, 115, 32, 77, 97, 99, 104, 105, 110, 101, 32, 105, 115, 32, 97, 32, 100, 101, 118, 105, 99, 101, 32, 115, 112, 101, 99, 105, 102, 105, 99, 97, 108, 108, 121, 32, 100, 101, 115, 105, 103, 110, 101, 100, 32, 105, 110, 32, 109, 97, 107, 105, 110, 103, 32, 97, 32, 115, 112, 101, 99, 105, 97, 108, 32, 116, 114, 101, 97, 116, 32, 107, 110, 111, 119, 110, 32, 97, 115, 32, 73, 99, 101, 32, 67, 114, 101, 97, 109, 32, 66, 121, 116, 101, 115, 33, 10, 73, 110, 32, 111, 114, 100, 101, 114, 32, 116, 111, 32, 101, 110, 115, 117, 114, 101, 32, 97, 32, 115, 117, 99, 99, 101, 115, 115, 102, 117, 108, 32, 99, 114, 101, 97, 116, 105, 111, 110, 32, 112, 114, 111, 99, 101, 115, 115, 44, 32, 112, 108, 101, 97, 115, 101, 32, 102, 111, 108, 108, 111, 119, 32, 116, 104, 101, 32, 100, 105, 114, 101, 99, 116, 105, 111, 110, 115, 32, 97, 115, 32, 108, 105, 115, 116, 101, 100, 32, 98, 101, 108, 111, 119, 58, 10, 72, 101, 114, 101, 32, 97, 114, 101, 32, 116, 104, 101, 32, 105, 110, 103, 114, 101, 100, 105, 101, 110, 116, 115, 32, 121, 111, 117, 32, 119, 105, 108, 108, 32, 110, 101, 101, 100, 32, 116, 111, 32, 117, 115, 101, 32, 116, 111, 32, 103, 101, 116, 32, 115, 116, 97, 114, 116, 101, 100, 32, 119, 105, 116, 104, 32, 109, 97, 107, 105, 110, 103, 32, 73, 99, 101, 32, 67, 114, 101, 97, 109, 32, 66, 121, 116, 101, 115, 58, 10, 49, 46, 32, 77, 105, 108, 107, 10, 50, 46, 32, 83, 117, 103, 97, 114, 10, 51, 46, 32, 67, 114, 101, 97, 109, 10, 52, 46, 32, 65, 110, 121, 32, 111, 116, 104, 101, 114, 32, 116, 111, 112, 112, 105, 110, 103, 115, 32, 121, 111, 117, 32, 100, 101, 115, 105, 114, 101, 33, 10, 70, 105, 114, 115, 116, 108, 121, 44, 32, 112, 108, 97, 99, 101, 32, 116, 104, 101, 32, 100, 101, 115, 105, 114, 101, 100, 32, 105, 110, 103, 114, 101, 100, 105, 101, 110, 116, 115, 32, 105, 110, 32, 116, 104, 101, 32, 99, 111, 114, 114, 101, 115, 112, 111, 110, 100, 105, 110, 103, 32, 100, 105, 115, 112, 101, 110, 115, 101, 114, 115, 46, 10, 78, 101, 120, 116, 44, 32, 101, 110, 116, 101, 114, 32, 116, 104, 101, 32, 99, 111, 114, 114, 101, 99, 116, 32, 112, 97, 115, 115, 119, 111, 114, 100, 44, 32, 97, 110, 100, 32, 115, 101, 108, 101, 99, 116, 32, 116, 104, 101, 32, 99, 111, 114, 114, 101, 99, 116, 32, 115, 101, 116, 116, 105, 110, 103, 115, 32, 116, 111, 32, 98, 101, 103, 105, 110, 32, 116, 104, 101, 32, 105, 99, 101, 32, 99, 114, 101, 97, 109, 32, 99, 114, 101, 97, 116, 105, 111, 110, 32, 112, 114, 111, 99, 101, 115, 115, 46, 10, 77, 97, 107, 101, 32, 115, 117, 114, 101, 32, 116, 104, 101, 32, 105, 99, 101, 32, 99, 114, 101, 97, 109, 32, 109, 97, 99, 104, 105, 110, 101, 32, 105, 115, 32, 115, 101, 99, 117, 114, 101, 32, 97, 110, 100, 32, 116, 111, 32, 101, 110, 115, 117, 114, 101, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 108, 105, 100, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 111, 118, 101, 114, 102, 105, 108, 108, 46, 10, 87, 104, 101, 110, 32, 116, 104, 101, 32, 103, 114, 101, 101, 110, 32, 108, 105, 103, 104, 116, 32, 97, 112, 112, 101, 97, 114, 115, 44, 32, 121, 111, 117, 32, 109, 97, 121, 32, 114, 101, 109, 111, 118, 101, 32, 116, 104, 101, 32, 99, 111, 110, 116, 97, 105, 110, 101, 114, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 114, 101, 115, 116, 32, 111, 102, 32, 116, 104, 101, 32, 109, 97, 99, 104, 105, 110, 101, 46, 32, 69, 110, 106, 111, 121, 33, 10, 72, 101, 114, 101, 32, 97, 114, 101, 32, 115, 111, 109, 101, 32, 116, 114, 111, 117, 98, 108, 101, 115, 104, 111, 111, 116, 105, 110, 103, 32, 116, 105, 112, 115, 58, 10, 49, 46, 32, 69, 110, 115, 117, 114, 101, 32, 116, 104, 97, 116, 32, 116, 104, 101, 32, 109, 97, 99, 104, 105, 110, 101, 32, 100, 111, 101, 115, 32, 110, 111, 116, 32, 114, 117, 110, 32, 102, 111, 114, 32, 108, 111, 110, 103, 101, 114, 32, 116, 104, 97, 110, 32, 53, 32, 109, 105, 110, 117, 116, 101, 115, 32, 105, 110, 32, 97, 32, 114, 111, 119, 46, 10, 50, 46, 32, 73, 116, 32, 105, 115, 32, 104, 101, 108, 112, 102, 117, 108, 32, 116, 111, 32, 109, 105, 120, 32, 115, 111, 109, 101, 32, 111, 102, 32, 116, 104, 101, 32, 105, 110, 103, 114, 101, 100, 105, 101, 110, 116, 115, 32, 102, 105, 114, 115, 116, 32, 105, 110, 32, 111, 114, 100, 101, 114, 32, 116, 111, 32, 109, 97, 107, 101, 32, 116, 104, 101, 32, 112, 114, 111, 99, 101, 115, 115, 32, 103, 111, 32, 115, 109, 111, 111, 116, 104, 108, 121, 46, 10, 51, 46, 32, 66, 101, 102, 111, 114, 101, 32, 117, 115, 105, 110, 103, 32, 116, 104, 101, 32, 109, 97, 99, 104, 105, 110, 101, 44, 32, 101, 110, 115, 117, 114, 101, 32, 116, 104, 101, 32, 108, 105, 103, 104, 116, 32, 105, 115, 32, 110, 111, 116, 32, 114, 101, 100, 46, 32, 73, 102, 32, 115, 111, 44, 32, 108, 101, 116, 32, 116, 104, 101, 32, 109, 97, 99, 104, 105, 110, 101, 32, 99, 111, 111, 108, 32, 102, 111, 114, 32, 49, 48, 45, 49, 53, 32, 109, 105, 110, 117, 116, 101, 115, 32, 98, 101, 102, 111, 114, 101, 32, 117, 115, 101, 46, 10, 70, 111, 114, 32, 101, 120, 116, 114, 97, 32, 104, 101, 108, 112, 44, 32, 112, 108, 101, 97, 115, 101, 32, 99, 111, 110, 116, 97, 99, 116, 32, 116, 104, 101, 32, 109, 97, 110, 117, 102, 97, 99, 116, 117, 114, 101, 114, 32, 97, 115, 32, 112, 114, 105, 110, 116, 101, 100, 32, 111, 110, 32, 116, 104, 101, 32, 108, 97, 98, 101, 108, 46, 10, 87, 101, 32, 104, 111, 112, 101, 32, 121, 111, 117, 32, 101, 110, 106, 111, 121, 32, 117, 115, 105, 110, 103, 32, 121, 111, 117, 114, 32, 110, 101, 119, 32, 73, 99, 101, 32, 67, 114, 101, 97, 109, 32, 66, 121, 116, 101, 115, 32, 77, 97, 99, 104, 105, 110, 101, 33]

index =[27, 120, 79, 80, 147, 154, 97, 8, 13, 46, 31, 54, 15, 112, 3, 464, 116, 58, 87, 120, 139, 75, 6, 182, 9, 153, 53, 7, 42, 23, 24, 159, 41, 110 ]

string =""

for i in range(0, len(index)):
	string+= (long_to_bytes(binn[index[i]]).decode())

print(string)

top =[4, 61, -8, -7, 58, 55, -8, 49, 20, 65, -7, 54, -8, 66, -9, 69, 20, -9, -12, -4, 20, 5, 62, 3, -13, 66, 8, 3, 56, 47, -5, 13, 1, -7]

new = []
for i in range(0, len(string)):
	new.append((binn[i] - top[i]))

new2 = [0]*len(new)

new2[0] = (new[len(new)-1])

for i in range(1,len(new)-1):
	if i%2==0:
		new2[i]==new[i-2]
	else:
		if(i< len(new) -2):
			new2[i]=

